Booths alg = mult alg to multiply 2 signed binary nums in 2's complement
Booth used desk calculators that were faster at shifting than they were adding and then created the alg to increase speed

multiplicand into BR and multiplier in QR, alg works per the following conditions:
  1. If Qn and Q(n+1) are the same (i.e 00 or 11), perform arith shift by 1 bit
  2. If QnQ(n+1) = 01, do: A = A + BR, and perform arith shift by 1 bit
  3. If QnQ(n+1) = 10, do: A = A - BR, and perform arith shit by 1 bit
  
Java implementation: (mostly, excluding a lot of print statements. source: https://www.geeksforgeeks.org/booths-multiplication-algorithm/  )

static void adder(int accumulator[], int x[], int qrn) {
  //for typing purposes, accumulator[] will now be written as a[]
  //performs the adding in the accumulator

  int i, c = 0;
  for (i = 0; i < qrn; i++) {
    a[i] = a[i] + x[i] + c; //accumulator update w A = A + BR
    if (a[i] > 1) {
      a[i] = a[i] % 2;
      c = 1;
    }
    else {
      c = 0;
    }
  }
}

static void complement(int b[], int n) {
  //finds the nums complement
  int i;
  int[] x = new int[8];
  x[0] = 1;
  for (i = 0; i < n; i++) {
    b[i] = (b[i] + 1) % 2;
  }
  add(b, x, n);
}

static void rShift(int ac[], int qr[], int qn, int qrn) {
  //right shift function
  int temp, i;
  temp = ac[0];
  qn = qr[0];
  for (i = 0; i < qrn - 1; i++) {
    ac[i] = ac[i + 1];
    qr[i] = qr[i + 1];
  }
  qr[qrn - 1] = temp;
}

static void boothAlg(int br[], int qr[], int mt[], int qrn, int sc) {
  int qn = 0;
  int[] ac = new int[10];
  int temp = 0;
  while (sc != 0) { 
    // SECOND CONDITION
    if ((qn + qr[0]) == 1) 
    {
      if (temp == 0) 
      {
        // subtract BR from accumulator
        add(ac, mt, qrn);
        for (int i = qrn - 1; i >= 0; i--)
        {
          System.out.print(ac[i]);
        }
        temp = 1;
      }
      // THIRD CONDITION
      else if (temp == 1) {
        // add BR to accumulator
        add(ac, br, qrn);
        for (int i = qrn - 1; i >= 0; i--) {
          System.out.print(ac[i]);
        }
        temp = 0;
      }
      rtShift(ac, qr, qn, qrn);
   }//end of first if statement
   // FIRST CONDITION
   else if (qn - qr[0] == 0) {
    rightShift(ac, qr, qn, qrn);
   }
   // decrement counter
   sc--;
  } //end while loop
}

static void reverse(int a[]) {
  int i, k, n = a.length;
  int t;
  for (i = 0; i < n / 2; i++) {
    t = a[i];
    a[i] = a[n - i - 1];
    a[n - i - 1] = t;
  }
}

public static void main(String[] args) {
  int[] mt = new int[10];
  int sc;
  int brn, qrn;
  brn = 4; //num of mult.cand bit
  int br[] = {0,1,1,0}; //multiplicand ex
  for (int i = brn -1; i >= 0; i--) {
    mt[i] = br[i];
  }
  reverse(br);
  complement(mt, brn);
  qrn = 4; //num of mult.plier bits
  sc = qrn; //sequence counter
  int qr[] = {1,0,1,0}; //multiplier ex
  reverse(qr);
  boothAlg(br, qr, mt, qrn, sc);
}
